#Write a method that takes an array of integers and an integer to search for. The method should return the index of the item, or nil if the integer is not present in the array. Don't use built-in array methods like .index. You are allowed to use .length and .each.
arr = [42, 89, 23, 1]
#p search_array(arr, 1) => 3
#arr.index(1) 

def search(array, item)
  x = 0 
  while x < array.length #keep going until x == index number; puts x; 
    if array[x] == item
      puts x
    end
  x += 1
  end
end

search(arr, 1)

#Add a method to your file that takes a number of Fibonacci terms to generate and returns an array of the terms. For example, fib(6) would return [0,1,1,2,3,5]. Your method should work for a large number of terms. To verify your work: the last number in the array generated by fib(100) will be 218922995834555169026. (How can you verify this without having to compare this huge number manually? Be smart with your driver code!)

fib_array = [0,1]


def fib(number_of_terms)
  fib_array = [0,1]
  until fib_array.size == number_of_terms
    sum = fib_array[-1].to_i + fib_array[-2].to_i 
    fib_array << sum 
  end 
  fib_array
end 

p fib(100)

if fib(100)[-1] == 218922995834555169026
  puts "Fuck yeah"
end 


